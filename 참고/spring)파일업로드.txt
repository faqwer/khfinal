spring file upload

-lib

<!-- FileUpload lib -->
   <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
   <dependency>
       <groupId>commons-io</groupId>
       <artifactId>commons-io</artifactId>
       <version>2.4</version>
   </dependency>
   <!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
   <dependency>
       <groupId>commons-fileupload</groupId>
       <artifactId>commons-fileupload</artifactId>
       <version>1.3.1</version>
   </dependency>



-dispatcher
기본 사이즈-1(무제한)
id= multipartResolver (오타나면 인식안됨)

<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
	</bean>

spring에서 파일 업로드는 컨트롤러에 진입하기전에 이미 temp폴더에 업로드가 되므로 원하는 위치에 업로드를 하려면 복사해서 넣어준다.


-controller

package hyun.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.map.HashedMap;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import hyun.file.model.FileDTO;

@Controller
public class FileController {

	@RequestMapping("/fileUploadForm.do")
	public String fileUploadForm() {
		return "file/fileUploadForm";
	}

	@RequestMapping("/fileUpload1.do")
	public String fileUpload1(@RequestParam("writer") String writer, @RequestParam("upload") MultipartFile upload) {
		copyInto(writer, upload);

		return "file/fileOk";
	}

	@RequestMapping("/fileUpload2.do")
	public String fileUpload2(MultipartHttpServletRequest req) {
		String writer = req.getParameter("writer");
		MultipartFile upload = req.getFile("upload");
		System.out.println(writer + "," + upload.getOriginalFilename());
		copyInto(writer, upload);
		return "file/fileOk";
	}

	@RequestMapping("/fileUpload3.do")
	public String fileUpload3(FileDTO dto) {
		String writer = dto.getWriter();
		MultipartFile[] upload = dto.getUpload();
		copyInto(writer, upload);
		return "file/fileOk";
	}

	@RequestMapping("/fileUpload4.do")
	public String fileUpload4(FileDTO dto) {
		String writer = dto.getWriter();
		MultipartFile[] upload = dto.getUpload();
		copyInto(writer, upload);
		return "file/fileOk";
	}
	
	@RequestMapping("/fileUpload5.do")
	public String fileUpload5(@RequestParam("writer") String writer, @RequestParam("upload") List<MultipartFile> upload) {
		for(int i=0;i<upload.size();i++) {
			copyInto(writer, upload.get(i));
		}
		return "file/fileOk";
	}
	
	@RequestMapping("/fileDownloadForm.do")
	public ModelAndView fileDownload() {
		ModelAndView mav=new ModelAndView();
		File file=new File("F:/이현재/upload");
		File[] files=file.listFiles();
		mav.addObject("list", files);
		mav.setViewName("file/fileList");
		return mav;
	}


	public void copyInto(String writer, MultipartFile upload) {
		try {
			System.out.println(upload.getOriginalFilename());
			byte bytes[] = upload.getBytes();
			File newFile = new File("F:/이현재/upload/" + upload.getOriginalFilename());
			FileOutputStream fos = new FileOutputStream(newFile);
			fos.write(bytes);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void copyInto(String writer, MultipartFile[] upload) {
		try {
			for (int i = 0; i < upload.length; i++) {
				System.out.println(upload[i].getOriginalFilename());
				byte bytes[] = upload[i].getBytes();
				File newFile = new File("F:/이현재/upload/" + upload[i].getOriginalFilename());
				FileOutputStream fos = new FileOutputStream(newFile);
				fos.write(bytes);
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}


-다운로드 뷰

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.servlet.view.AbstractView;

public class DownloadView extends AbstractView {
	public DownloadView() {
		setContentType("application/download; charset=utf-8");
	}
	@Override
	protected void renderMergedOutputModel(Map<String, Object> model,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		File file = (File) model.get("downloadFile");                        //mav의 이름이 같아야 가져온다.
		response.setContentType(getContentType());
		response.setContentLength((int) file.length());
		String userAgent = request.getHeader("User-Agent");
		boolean ie = userAgent.indexOf("MSIE") > -1;
		String fileName = null;
		if (ie) {
			fileName = URLEncoder.encode(file.getName(), "utf-8");
		} else {
			fileName = new String(file.getName().getBytes("utf-8"),
					"iso-8859-1");
		}
		response.setHeader("Content-Disposition", "attachment; filename=\""
				+ fileName + "\";");
		response.setHeader("Content-Transfer-Encoding", "binary");
		OutputStream out = response.getOutputStream();
		FileInputStream fis = null;
		try {
			fis = new FileInputStream(file);
			FileCopyUtils.copy(fis, out);
		} finally {
			if (fis != null)
				try {
					fis.close();
				} catch (IOException ex) {
				}
		}
		out.flush();

	}
}

-dispatcher 등록

	
	<bean id="hyunDown" class="hyun.view.DownloadView"></bean>
	
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1"/>                                             //order 낮은순부터 실행
	</bean>
	
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0"/>
	</bean>