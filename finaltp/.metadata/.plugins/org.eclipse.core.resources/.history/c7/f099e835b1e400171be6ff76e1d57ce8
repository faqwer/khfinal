package finaltp.controller;

import java.io.File;
import java.sql.Date;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.codehaus.jackson.map.util.JSONPObject;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import finaltp.plan.model.PlanDTO;

@Controller
public class PlanController {

	@RequestMapping("/routesearch.do")
	public ModelAndView routeSearchForm() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("planner/routeSearch");
		return mav;
	}
	
	@RequestMapping("/planwrite.do")
	public ModelAndView plannerWrite(PlanDTO pdto,
			@RequestParam(value= "startdaytext")String startdaytext,
			HttpServletRequest request, HttpSession session)throws Exception{
		ModelAndView mav=new ModelAndView();
		java.sql.Date startday=java.sql.Date.valueOf(startdaytext);
		pdto.setStartday(startday);
		String fileName = "";
		String id = (String) session.getAttribute("userid");
		String resultMsg = "";
		MultipartHttpServletRequest mr;
		String imgName = "";
		mr = (MultipartHttpServletRequest) request;
		System.out.println("mr=" + mr.getFile("file"));
		MultipartFile imgfile = mr.getFile("file");
		System.out.println("imgfile=" + imgfile.getOriginalFilename());
		if (!imgfile.getOriginalFilename().equals("")) {
			System.out.println("imgfile=" + imgfile);
			imgName = imgfile.getOriginalFilename().trim(); // 사진 이름 저장
			String filepath = "C:\\Users\\Hyun\\Desktop\\finaltp\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\finaltp\\img\\plancover\\"; // 사진을 넣어줄 폴더 경로 + 사용자 아이디는 아직 안 넣음

			// 파일 확장자 체크
			int pathPoing = imgName.lastIndexOf(".");
			String filePoint = imgName.substring(pathPoing + 1, imgName.length());
			String fileType = filePoint.toLowerCase();

			if (!fileType.equals("jpg") && !fileType.equals("png") && !fileType.equals("jpeg")) {
				resultMsg = "이미지 파일만 업로드 가능합니다.";
			}

			File f = new File(filepath + id); // filepath에 해당 아이디의 폴더 존재 확인
			System.out.println(f.exists());
			if (!f.exists()) {
				System.out.println("폴더없음");
				f.mkdirs(); // 폴더 생성
			}
			// 폴더가 존재한다면 폴더 내의 파일들 없애는 구문 추가 > 폴더 비움
			String finalImg = filepath + id + File.separator + imgName; // filepath+사용자 아이디(폴더명)+/+사진 이름 > 총경로
			// 디비에 업데이트 문 사용해서 프로필 이미지 경로 finalImg 로 수정해주기.
			System.out.println("/finaltp/plancover/" + id + File.separator + imgName);
			System.out.println(finalImg + "---------");
			imgfile.transferTo(new File(finalImg)); // 사진 파일 폴더에 추가
			resultMsg = "정상적으로 업로드 하였습니다.";
			System.out.println(resultMsg);

			fileName = finalImg;
		}
		pdto.setCoverimg("/finaltp/plancover/" + id + File.separator + imgName);
		System.out.println("getMember_idx="+pdto.getMember_idx());
		System.out.println("getThema="+pdto.getThema());
		System.out.println("getSubject="+pdto.getSubject());
		System.out.println("getStartday="+pdto.getStartday());
		System.out.println("getDay="+pdto.getDay());
		System.out.println("getPlan_story_subject="+pdto.getPlan_story_subject());
		System.out.println("getPlan_story_content="+pdto.getPlan_story_content());
		System.out.println("getSchedule="+pdto.getSchedule());
		mav.setViewName("planner/planSaveResult");
		return mav;
	}
	
	@RequestMapping("/planwriteForm.do")
	public ModelAndView plannerWriteForm(@RequestParam(value = "subject") String subject,
			@RequestParam(value = "startday_year") String startday_year,
			@RequestParam(value = "startday_month") String startday_month,
			@RequestParam(value = "startday_day") String startday_day,
			@RequestParam(value = "thema") String thema) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("planner/planWrite");
		mav.addObject("subject",subject);
		mav.addObject("startday_year",startday_year);
		mav.addObject("startday_month",startday_month);
		mav.addObject("startday_day",startday_day);
		mav.addObject("thema",thema);
		return mav;
	}
	
	@RequestMapping("/calendar.do")
	public ModelAndView calendar(@RequestParam(value = "year", defaultValue = "-1") int _year,
			@RequestParam(value = "month", defaultValue = "-1") int _month) {
		ModelAndView mav = new ModelAndView();
		
		Calendar now = Calendar.getInstance();
		int year = now.get(Calendar.YEAR);
		int month = now.get(Calendar.MONTH) + 1;

		if (_year != -1) {
			year = _year;
		}
		if (_month != -1) {
			month = _month;
		}
		now.set(year, month - 1, 1); // 출력할 년도, 월로 설정

		year = now.get(Calendar.YEAR); // 변화된 년, 월
		month = now.get(Calendar.MONTH) + 1;
		
		int end = now.getActualMaximum(Calendar.DAY_OF_MONTH); // 해당월의 마지막 날짜
		int w = now.get(Calendar.DAY_OF_WEEK); // 1~7(일~토)
		mav.addObject("year",year);
		mav.addObject("month",month);
		mav.addObject("end",end);
		mav.addObject("w",w);
		mav.setViewName("planner/calendar");
		return mav;
	}
}
